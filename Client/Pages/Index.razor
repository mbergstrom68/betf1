@page "/"
@using System.ServiceModel.Syndication
@using BlazorApp.Client.Models
@using BlazorApp.Client.Components
@inject HttpClient Client

<PageTitle>Tippa F1</PageTitle>

<div style="background-image: url('images/f1-merc-medium-flat.jpg'); background-size: cover; width: 95%; height: 35vw; margin-left: auto; margin-right: auto;">
</div>

<section>
    <Container>
        <CardDeck>
            @{
                int group = 0;
                var newsItems = NewsList.Skip(group++ * 3).Take(3).ToList();
            }
            @while (newsItems.Any())
            {
                <NewsRow NewsItems="@newsItems" />
                newsItems = NewsList.Skip(group++ * 3).Take(3).ToList();
            }
        </CardDeck>
    </Container>
</section>

@code
{
    public IList<NewsModel> NewsList { get; set; } = new List<NewsModel>();

    protected async override Task OnInitializedAsync()
    {
        var result = await Client.GetAsync("api/news");
        result.EnsureSuccessStatusCode();

        var xmlStream = await result.Content.ReadAsStreamAsync();


        using var reader = System.Xml.XmlReader.Create(xmlStream, new System.Xml.XmlReaderSettings { DtdProcessing = System.Xml.DtdProcessing.Parse });
        var feed = SyndicationFeed.Load(reader);

        NewsList = feed.Items.Take(12).Select(item => new NewsModel
            {
                Title = item.Title.Text,
                Description = item.Summary.Text.Substring(0, item.Summary.Text.IndexOf('.', 150)) + " ...",
                ImageUrl = item.Links
                            .Where(link => link.RelationshipType == "enclosure")
                            .Select(link => link.Uri)
                            .FirstOrDefault(),
                Alt = item.Links
                            .Where(link => link.RelationshipType == "alternate")
                            .Select(link => link.Uri)
                            .FirstOrDefault()
            }).ToList();

        StateHasChanged();

        await base.OnInitializedAsync();
    }
}
